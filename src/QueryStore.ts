/**
 * Generated by orval v6.29.1 🍺
 * Do not edit manually.
 * Example API
 * Documentation for Example API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type {
  GetApiChartStatistic200Item,
  GetApiChartTotalIncome200Item,
  GetApiChartTours200Item,
  PostApiAuthLogin200,
  PostApiAuthLoginBody,
  PostApiAuthRegister200,
  PostApiAuthRegisterBody,
} from "./model";
import { useCustomInstance } from "./custom-axios-instance";
import type { ErrorType } from "./custom-axios-instance";

/**
 * @summary User login
 */
export const usePostApiAuthLoginHook = () => {
  const postApiAuthLogin = useCustomInstance<PostApiAuthLogin200>();

  return useCallback(
    (postApiAuthLoginBody: PostApiAuthLoginBody) => {
      return postApiAuthLogin({
        url: `/api/auth/login`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiAuthLoginBody,
      });
    },
    [postApiAuthLogin],
  );
};

export const usePostApiAuthLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
    TError,
    { data: PostApiAuthLoginBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
  TError,
  { data: PostApiAuthLoginBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postApiAuthLogin = usePostApiAuthLoginHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
    { data: PostApiAuthLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>
>;
export type PostApiAuthLoginMutationBody = PostApiAuthLoginBody;
export type PostApiAuthLoginMutationError = ErrorType<unknown>;

/**
 * @summary User login
 */
export const usePostApiAuthLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
    TError,
    { data: PostApiAuthLoginBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
  TError,
  { data: PostApiAuthLoginBody },
  TContext
> => {
  const mutationOptions = usePostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary User registration
 */
export const usePostApiAuthRegisterHook = () => {
  const postApiAuthRegister = useCustomInstance<PostApiAuthRegister200>();

  return useCallback(
    (postApiAuthRegisterBody: PostApiAuthRegisterBody) => {
      return postApiAuthRegister({
        url: `/api/auth/register`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postApiAuthRegisterBody,
      });
    },
    [postApiAuthRegister],
  );
};

export const usePostApiAuthRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>,
    TError,
    { data: PostApiAuthRegisterBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>,
  TError,
  { data: PostApiAuthRegisterBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postApiAuthRegister = usePostApiAuthRegisterHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>,
    { data: PostApiAuthRegisterBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>
>;
export type PostApiAuthRegisterMutationBody = PostApiAuthRegisterBody;
export type PostApiAuthRegisterMutationError = ErrorType<unknown>;

/**
 * @summary User registration
 */
export const usePostApiAuthRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>,
    TError,
    { data: PostApiAuthRegisterBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthRegisterHook>>>,
  TError,
  { data: PostApiAuthRegisterBody },
  TContext
> => {
  const mutationOptions = usePostApiAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get tour chart data
 */
export const useGetApiChartToursHook = () => {
  const getApiChartTours = useCustomInstance<GetApiChartTours200Item[]>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiChartTours({
        url: `/api/chart/tours`,
        method: "GET",
        signal,
      });
    },
    [getApiChartTours],
  );
};

export const getGetApiChartToursQueryKey = () => {
  return [`/api/chart/tours`] as const;
};

export const useGetApiChartToursQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiChartToursHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiChartToursHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiChartToursQueryKey();

  const getApiChartTours = useGetApiChartToursHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetApiChartToursHook>>>
  > = ({ signal }) => getApiChartTours(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiChartToursHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChartToursQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiChartToursHook>>>
>;
export type GetApiChartToursQueryError = ErrorType<unknown>;

/**
 * @summary Get tour chart data
 */
export const useGetApiChartTours = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiChartToursHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiChartToursHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetApiChartToursQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get statistic chart data
 */
export const useGetApiChartStatisticHook = () => {
  const getApiChartStatistic =
    useCustomInstance<GetApiChartStatistic200Item[]>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiChartStatistic({
        url: `/api/chart/statistic`,
        method: "GET",
        signal,
      });
    },
    [getApiChartStatistic],
  );
};

export const getGetApiChartStatisticQueryKey = () => {
  return [`/api/chart/statistic`] as const;
};

export const useGetApiChartStatisticQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiChartStatisticHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiChartStatisticHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiChartStatisticQueryKey();

  const getApiChartStatistic = useGetApiChartStatisticHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetApiChartStatisticHook>>>
  > = ({ signal }) => getApiChartStatistic(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiChartStatisticHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChartStatisticQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiChartStatisticHook>>>
>;
export type GetApiChartStatisticQueryError = ErrorType<unknown>;

/**
 * @summary Get statistic chart data
 */
export const useGetApiChartStatistic = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiChartStatisticHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiChartStatisticHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetApiChartStatisticQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get total income chart data
 */
export const useGetApiChartTotalIncomeHook = () => {
  const getApiChartTotalIncome =
    useCustomInstance<GetApiChartTotalIncome200Item[]>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiChartTotalIncome({
        url: `/api/chart/totalIncome`,
        method: "GET",
        signal,
      });
    },
    [getApiChartTotalIncome],
  );
};

export const getGetApiChartTotalIncomeQueryKey = () => {
  return [`/api/chart/totalIncome`] as const;
};

export const useGetApiChartTotalIncomeQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiChartTotalIncomeHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiChartTotalIncomeHook>>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiChartTotalIncomeQueryKey();

  const getApiChartTotalIncome = useGetApiChartTotalIncomeHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetApiChartTotalIncomeHook>>>
  > = ({ signal }) => getApiChartTotalIncome(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiChartTotalIncomeHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiChartTotalIncomeQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiChartTotalIncomeHook>>>
>;
export type GetApiChartTotalIncomeQueryError = ErrorType<unknown>;

/**
 * @summary Get total income chart data
 */
export const useGetApiChartTotalIncome = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiChartTotalIncomeHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetApiChartTotalIncomeHook>>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetApiChartTotalIncomeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
